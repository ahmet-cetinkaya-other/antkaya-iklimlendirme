---
import { mergeCls } from "~/core/acore-ts/ui/ClassHelpers";

type Props = {
  value: string;
  name: string;
  required?: boolean;
  dropdownClass?: string;
};
const props = Astro.props;

const uniqueId = `dropdown-${Math.random().toString(36).slice(2)}`;
---

<div class="inline-block" id={`${uniqueId}-container`}>
  <div data-dropdown-trigger={uniqueId}>
    <slot name="trigger" />
  </div>
</div>

<!-- Template for dropdown menu -->
<template id={`${uniqueId}-template`}>
  <div
    class={mergeCls(
      "fixed z-50 min-w-[120px] rounded-md border border-gray-300 bg-white shadow-lg dark:bg-neutral-800 dark:border-neutral-700",
      props.dropdownClass,
    )}
  >
    <slot name="content" />
  </div>
</template>

<input type="hidden" id={`${uniqueId}-input`} name={props.name} value={props.value} required={props.required} />

<script define:vars={{ uniqueId, props }}>
  const triggerWrapper = document.querySelector(`[data-dropdown-trigger="${uniqueId}"]`);
  const template = document.getElementById(`${uniqueId}-template`);
  const hiddenInput = document.getElementById(`${uniqueId}-input`);
  let menu = null;

  // Update position on scroll and resize
  window.addEventListener("scroll", updatePosition, true);
  window.addEventListener("resize", updatePosition);

  // Click outside
  document.addEventListener("click", (e) => {
    if (menu && e.target instanceof Node && !triggerWrapper.contains(e.target) && !menu.contains(e.target)) hideMenu();
  });

  // Cleanup on page unload
  window.addEventListener("unload", hideMenu);

  function showMenu() {
    if (!menu) {
      menu = template.content.cloneNode(true).firstElementChild;
      document.body.appendChild(menu);

      // Add click handlers to new menu
      menu.querySelectorAll("button").forEach((button) => {
        button.addEventListener("click", () => {
          const value = button.dataset.dropdownValue;
          if (value) {
            hiddenInput.value = value;
          }
          
          // Execute any onClick handler
          if (button.hasAttribute("onclick")) {
            button.onclick();
          }
          
          hideMenu();
        });
      });
    }

    updatePosition();
    menu.style.display = "block";
  }

  function hideMenu() {
    if (!menu) return;

    menu.remove();
    menu = null;
  }

  function updatePosition() {
    if (!menu) throw new Error("Menu is not initialized.");

    const rect = triggerWrapper.getBoundingClientRect();
    menu.style.position = "fixed";
    menu.style.top = `${rect.bottom + 4}px`;
    menu.style.width = "min-content";
    menu.style.left = `${rect.left + rect.width / 2 - menu.offsetWidth / 2}px`;
  }

  triggerWrapper.addEventListener("click", (e) => {
    e.stopPropagation();
    if (!menu) showMenu();
    else hideMenu();
  });
</script>
