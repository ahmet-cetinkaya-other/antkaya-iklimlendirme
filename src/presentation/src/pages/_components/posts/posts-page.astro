---
import MainLayout from "~/presentation/src/shared/layouts/MainLayout.astro";
import CardPost from "~/presentation/src/features/posts/components/CardPost.astro";
import CardPostRecent from "~/presentation/src/features/posts/components/CardPostRecent.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { SITE, OG, PAGES } from "~/presentation/src/shared/constants/constants";
import { useI18nStatic } from "~/presentation/src/shared/hooks/useI18n";
import { TranslationKeys } from "~/domain/models/TranslationKey";
import { PAGE_SIZE } from "~/presentation/src/features/posts/constants/pagination";
import MainSection from "~/presentation/src/shared/components/ui/blocks/MainSection.astro";

const { translate, currentLocale } = useI18nStatic(Astro.url);

export async function getStaticPaths() {
  const posts = await getCollection("posts", (postEntry) => !postEntry.data.draft);
  const totalPages = Math.ceil(posts.length / PAGE_SIZE);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: (i + 1).toString() },
  }));
}

type Props = {};

const params = Astro.params;
const pageIndex = parseInt(params.page ?? 1) - 1;

const posts = (
  await getCollection("posts", (postEntry) => !postEntry.data.draft && postEntry.id.endsWith(currentLocale))
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Calculate pagination
const totalPages = Math.ceil(posts.length / PAGE_SIZE);
const currentPage = pageIndex + 1;
const paginatedPosts = posts.slice(pageIndex * PAGE_SIZE, (pageIndex + 1) * PAGE_SIZE);

// Separate posts into recent and others
const mostRecentPost: CollectionEntry<"posts"> | null = paginatedPosts.length > 0 ? paginatedPosts[0] : null;
const otherPosts: CollectionEntry<"posts">[] = paginatedPosts.length > 1 ? paginatedPosts.slice(1) : [];

// SEO content
const seoTitle = `${translate(TranslationKeys.posts_page_title)} - ${SITE.title}`;
const seoDescription = translate(TranslationKeys.posts_page_subtitle);
const ogTitle = `${SITE.title} - ${translate(TranslationKeys.common_posts)}`;
const ogDescription = seoDescription;
const canonicalURL = new URL(PAGES.posts.paths[currentLocale], Astro.site).href;
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Blog",
  "@id": canonicalURL,
  url: canonicalURL,
  name: seoTitle,
  description: seoDescription,
  inLanguage: currentLocale,
  publisher: {
    "@type": "Organization",
    name: SITE.title,
    url: SITE.url,
    logo: {
      "@type": "ImageObject",
      url: OG.image,
    },
  },
  blogPost: paginatedPosts.map((post) => ({
    "@type": "BlogPosting",
    headline: post.data.title,
    description: post.data.description,
    datePublished: post.data.pubDate.toISOString(),
    image: post.data.cardImage,
    author: {
      "@type": "Organization",
      name: SITE.title,
    },
  })),
};
---

<MainLayout
  title={seoTitle}
  description={seoDescription}
  ogType="blog"
  ogTitle={ogTitle}
  ogDescription={ogDescription}
  ogImage={OG.image}
  structuredData={structuredData}
  canonicalURL={canonicalURL}
>
  <section>
    <!--Page header-->
    <MainSection
      title={translate(TranslationKeys.posts_page_title)}
      subTitle={translate(TranslationKeys.posts_page_subtitle)}
      color="secondary"
    />
  </section>

  <section class="container pt-16">
    <!--Most recent post section-->
    {
      mostRecentPost && (
        <section class="mx-auto max-w-[85rem] px-4 sm:px-6 lg:px-8 2xl:max-w-full">
          <h2 class="sr-only">{translate(TranslationKeys.posts_recent_title)}</h2>
          <CardPostRecent postEntry={mostRecentPost} />
        </section>
      )
    }

    <!--Other posts section-->
    {
      otherPosts.length > 0 && (
        <section class="mx-auto mt-8 max-w-[85rem] px-4 sm:px-6 lg:px-8 2xl:max-w-full">
          <div class="grid gap-6 lg:grid-cols-2">
            {otherPosts.map((postEntry) => (
              <CardPost postEntry={postEntry} />
            ))}
          </div>
        </section>
      )
    }

    <!--No posts message-->
    {
      !posts.length && (
        <p class="mt-8 text-center text-lg text-neutral-600 dark:text-neutral-400">
          {translate(TranslationKeys.posts_no_posts)}
        </p>
      )
    }

    <!--Pagination-->
    {
      totalPages > 1 && (
        <div class="mx-auto mt-12 flex justify-center gap-2">
          <a
            href={`/posts/${currentPage > 1 ? currentPage - 1 : 1}`}
            class:list={[
              "inline-flex h-10 w-10 items-center justify-center rounded-lg border border-neutral-200 text-sm font-semibold text-neutral-800 transition-colors hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-200 dark:hover:bg-neutral-800",
              { "pointer-events-none opacity-50": currentPage === 1 },
            ]}
          >
            <span class="sr-only">Previous</span>
            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path
                fill-rule="evenodd"
                d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                clip-rule="evenodd"
              />
            </svg>
          </a>

          {Array.from({ length: totalPages }, (_, i) => (
            <a
              href={`/posts/${i + 1}`}
              class:list={[
                "inline-flex h-10 w-10 items-center justify-center rounded-lg border text-sm font-semibold transition-colors",
                currentPage === i + 1
                  ? "border-primary-500 bg-primary-500 text-white"
                  : "border-neutral-200 text-neutral-800 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-200 dark:hover:bg-neutral-800",
              ]}
            >
              {i + 1}
            </a>
          ))}

          <a
            href={`/posts/${currentPage < totalPages ? currentPage + 1 : totalPages}`}
            class:list={[
              "inline-flex h-10 w-10 items-center justify-center rounded-lg border border-neutral-200 text-sm font-semibold text-neutral-800 transition-colors hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-200 dark:hover:bg-neutral-800",
              { "pointer-events-none opacity-50": currentPage === totalPages },
            ]}
          >
            <span class="sr-only">Next</span>
            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path
                fill-rule="evenodd"
                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                clip-rule="evenodd"
              />
            </svg>
          </a>
        </div>
      )
    }
  </section>
</MainLayout>
