---
import MainLayout from "~/presentation/src/shared/layouts/MainLayout.astro";
import CardRelated from "~/presentation/src/shared/components/ui/cards/CardRelated.astro";
import Bookmark from "~/presentation/src/shared/components/ui/buttons/Bookmark.astro";
import SocialShare from "~/presentation/src/shared/components/ui/buttons/SocialShare.astro";
import { capitalize, formatDate } from "~/presentation/src/shared/utils/utils";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { SITE, OG, PAGES } from "~/presentation/src/shared/constants/constants";
import SlugHelper from "~/presentation/src/shared/utils/SlugHelper";
import { useI18nStatic } from "~/presentation/src/shared/hooks/useI18n";
import ArrayExtensions from "~/core/acore-ts/data/array/ArrayExtensions";
import { TranslationKeys } from "~/domain/models/TranslationKey";
import Image from "astro/components/Image.astro";
import MainSection from "~/presentation/src/shared/components/ui/blocks/MainSection.astro";
import { render } from "astro:content";

type Props = {};

const { translate, currentLocale } = useI18nStatic(Astro.url);

export async function getStaticPaths(locale?: string) {
  const posts = await getCollection(
    "posts",
    (postEntry) => !postEntry.data.draft && postEntry.id.endsWith(locale ?? currentLocale),
  );
  return posts.map((post) => ({ params: { slug: SlugHelper.slugify(post.data.title) } }));
}

const params = Astro.params;

const posts: CollectionEntry<"posts">[] = await getCollection(
  "posts",
  (postEntry) => !postEntry.data.draft && postEntry.id.endsWith(currentLocale),
);
const post: CollectionEntry<"posts"> = posts.find((post) => SlugHelper.slugify(post.data.title) === params.slug)!;
const { Content } = await render(post);
const otherPosts: CollectionEntry<"posts">[] = ArrayExtensions.shuffle(posts)
  .filter((p) => p.id !== post.id)
  .slice(0, 2);

// SEO content
const seoTitle = `${post.data.title} | ${SITE.title}`;
const seoDescription = post.data.description;
const ogTitle = post.data.title;
const ogDescription = post.data.description;
const canonicalURL = new URL(`${PAGES.posts.paths[currentLocale]}${SlugHelper.slugify(post.data.title)}`, Astro.site)
  .href;
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "@id": canonicalURL,
  url: canonicalURL,
  name: seoTitle,
  headline: post.data.title,
  description: post.data.description,
  inLanguage: currentLocale,
  datePublished: post.data.pubDate.toISOString(),
  image: {
    "@type": "ImageObject",
    url: post.data.cardImage,
  },
  author: {
    "@type": "Organization",
    name: SITE.title,
    url: SITE.url,
  },
  publisher: {
    "@type": "Organization",
    name: SITE.title,
    url: SITE.url,
    logo: {
      "@type": "ImageObject",
      url: OG.image,
    },
  },
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": canonicalURL,
  },
  keywords: post.data.tags?.join(", "),
};
---

<MainLayout
  title={seoTitle}
  description={seoDescription}
  ogType="article"
  ogTitle={ogTitle}
  ogDescription={ogDescription}
  ogImage={post.data.cardImage}
  structuredData={structuredData}
  canonicalURL={canonicalURL}
>
  <MainSection color="secondary">
    <Image
      src={post.data.cardImage}
      alt={post.data.cardImageAlt}
      class="h-96 w-full rounded-lg object-cover shadow-lg"
    />
  </MainSection>
  <section class="mx-auto max-w-3xl px-4 pb-12 pt-16 pt-6 sm:px-6 lg:px-8">
    <!--Post post title-->
    <ul class="mt-6 text-xs text-neutral-500">
      <li
        class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
      >
        {formatDate(post.data.pubDate)}
      </li>
    </ul>
    <h2 class="mb-3 text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-3xl">
      {post.data.title}
    </h2>
    <!--Post post contents-->
    <div class="ac-content mb-5 space-y-5 md:mb-8 md:space-y-8">
      <Content />
    </div>
    <style is:inline>
      .ac-content h1 {
        font-size: 2em;
        margin-top: 1em;
        margin-bottom: 0.5em;
      }

      .ac-content h2 {
        font-size: 1.75em;
        margin-top: 1em;
        margin-bottom: 0.5em;
      }

      .ac-content h3 {
        font-size: 1.5em;
        margin-top: 1em;
        margin-bottom: 0.5em;
      }

      .ac-content p {
        margin-bottom: 1em;
        line-height: 1.6;
      }

      .ac-content ul,
      .ac-content ol {
        margin-bottom: 1em;
        padding-left: 1.5em;
      }

      .ac-content li {
        margin-bottom: 0.5em;
      }

      .ac-content a {
        color: #1e90ff;
        text-decoration: underline;
      }

      .ac-content blockquote {
        margin: 1em 0;
        padding: 0.5em 1em;
        border-left: 4px solid #ccc;
        background-color: #f9f9f9;
      }

      .ac-content img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 1em 0;
      }

      .ac-content ul {
        list-style-type: disc;
      }

      .ac-content ol {
        list-style-type: decimal;
      }

      .ac-content table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1em;
      }

      .ac-content th,
      .ac-content td {
        border: 1px solid #ddd;
        padding: 8px;
      }

      .ac-content th {
        background-color: #f2f2f2;
        text-align: left;
      }

      .ac-content tr:nth-child(even) {
        background-color: #f9f9f9;
      }

      .ac-content tr:hover {
        background-color: #ddd;
      }
    </style>
  </section>
  <div class="mx-auto grid max-w-screen-lg gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0">
    <!--Post post tags-->
    <div class="flex flex-wrap gap-x-2 gap-y-1 sm:flex-nowrap sm:items-center sm:gap-y-0">
      {
        post.data.tags?.map((tag: string) => (
          <span class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 outline-none focus:outline-none focus-visible:outline-none focus-visible:ring dark:bg-neutral-700/60 dark:text-neutral-300">
            {capitalize(tag)}
          </span>
        ))
      }
    </div>
    <!--Bookmark and Share buttons-->
    <div class="flex items-center justify-end gap-x-1.5">
      <Bookmark />
      <div class="mx-3 block h-4 border-e border-neutral-400 dark:border-neutral-500"></div>
      <div class="inline-flex">
        <SocialShare pageTitle={post.data.title} />
      </div>
    </div>
  </div>
</MainLayout>

<!--Related articles section-->
{
  otherPosts.length && (
    <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
      <div class="mb-10 max-w-2xl">
        <h2 class="text-balance text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight">
          {translate(TranslationKeys.posts_other_posts)}
        </h2>
      </div>

      <div class="grid grid-cols-2 gap-6">
        {otherPosts.map((entry) => (
          <CardRelated postEntry={entry} />
        ))}
      </div>
    </section>
  )
}
