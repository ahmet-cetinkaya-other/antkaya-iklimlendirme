---
import PrimaryCTA from '../buttons/PrimaryCTA.astro';

type Props = {
  title?: string;
  btnId: string;
  btnTitle: string;
  url: string;
}
const props = Astro.props;

---

<astro-banner btnId={props.btnId}>
  <div class="fixed bottom-0 start-1/2 z-[100] mx-auto w-full max-w-[280px] -translate-x-1/2 transform">
    <!-- Remote body with navbar-like styling -->
    <div 
      class="relative rounded-2xl rounded-b-none border-2 border-t border-gray-300/80 border-t-gray-200/30 bg-white/70 p-6 shadow-lg backdrop-blur-xl transition-all duration-300 before:pointer-events-none before:absolute before:bottom-0 before:left-0 before:right-0 before:-z-20 before:h-8 before:rounded-b-2xl before:bg-[linear-gradient(0deg,_rgba(0,0,0,0.08)_1px,transparent_1px)] before:bg-[size:8px_4px] before:content-[''] hover:-translate-y-0.5 hover:shadow-xl dark:border-neutral-600/80 dark:border-t-white/10 dark:bg-neutral-800/75 dark:before:bg-[linear-gradient(0deg,_rgba(255,255,255,0.12)_1px,transparent_1px)]"
    >
      <!-- Infrared window with adjusted color -->
      <div class="absolute left-1/2 top-0 h-3 w-6 -translate-x-1/2 rounded-b-sm bg-neutral-900/30"></div>

      <!-- Model number -->
      <div class="absolute left-3 top-2">
        <p class="text-[7px] text-neutral-400">MODEL AC-{new Date().getFullYear()}</p>
      </div>

      <!-- LCD Display -->
      <div class="relative flex flex-col items-center gap-3">
        <div class="relative w-full overflow-hidden rounded-lg bg-neutral-900/90 p-3 shadow-inner dark:bg-neutral-200/90">
          <!-- LCD Background Pattern -->
          <div class="absolute inset-0 opacity-5">
            <div class="grid h-full w-full grid-cols-8 gap-px">
              {Array(32).fill(0).map(() => <div class="bg-neutral-400" />)}
            </div>
          </div>
          
          {props.title && (
            <div class="relative">
              <p class="text-center font-lcd text-base font-bold tracking-wide text-neutral-100 dark:text-neutral-800">
                {props.title}
              </p>
              
              <div class="mt-1 flex flex-col gap-0.5 text-center font-lcd text-xs text-neutral-100/70 dark:text-neutral-800/70">
                <div id="temperatureValue">25°C</div>
                <div class="text-xs">Humidity: <span id="humidityValue">50%</span></div>
              </div>
            </div>
          )}
        </div>

        <div class="relative flex w-full flex-col gap-3">
          <!-- Main action buttons -->
          <div class="relative flex w-full justify-between">
            <PrimaryCTA title={props.btnTitle} url={props.url} class='w-full bg-blue-500 hover:bg-blue-600' />

            <button
              type="button"
              class="relative ml-2 rounded-full bg-gradient-to-b from-red-500 to-red-600 p-2 text-white shadow-lg shadow-red-500/20 transition duration-200 hover:from-red-600 hover:to-red-700 active:translate-y-0.5 active:shadow-none"
              id={props.btnId}
              style="z-index: 1;"
            >
              <span class="sr-only">Dismiss</span>
              <svg class="size-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M18 6 6 18" />
                <path d="m6 6 12 12" />
              </svg>
            </button>
          </div>
        </div>


      </div>
    </div>
  </div>
</astro-banner>

<style>
  .font-lcd {
    font-family: "Digital-7", monaco, monospace;
  }
</style>

<script>
  class AstroBanner extends HTMLElement {
    connectedCallback() {
      const btnId = this.getAttribute("btnId");
      const button = this.querySelector(`#${btnId}`);
      if (button != null) {
        button.addEventListener("click", () => this.remove());
      }
    }
  }

  customElements.define("astro-banner", AstroBanner);


  document.addEventListener("DOMContentLoaded", updateWeatherInfo);
  document.addEventListener("astro:after-swap", updateWeatherInfo);

  type WeatherData = {
    current: {
      temperature_2m: number;
      relative_humidity_2m: number;
    }
  };

  async function updateWeatherInfo() {
    const response = await fetch(
      "https://api.open-meteo.com/v1/forecast?latitude=36.9081&longitude=30.6956&current=temperature_2m,relative_humidity_2m"
    );
    const data : WeatherData = await response.json();
    if (!data) return;
    
    const temperatureValue = document.getElementById("temperatureValue");
    if (!temperatureValue) throw new Error("Temperature value element not found.");
    const humidityValue = document.getElementById("humidityValue");
    if (!humidityValue) throw new Error("Humidity value element not found.");
    temperatureValue.textContent = `${data.current.temperature_2m}°C`;
    humidityValue.textContent = `${data.current.relative_humidity_2m}%`;
  }
</script>
