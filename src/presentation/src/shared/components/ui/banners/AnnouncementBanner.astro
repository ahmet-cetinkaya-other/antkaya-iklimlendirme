---
import PrimaryCTA from "../buttons/PrimaryCTA.astro";

type Props = {
  title?: string;
  btnId: string;
  btnTitle: string;
  url: string;
};
const props = Astro.props;
---

<astro-banner btnId={props.btnId}>
  <div
    id="announcementBanner"
    class="fixed bottom-0 start-1/2 z-[100] mx-auto w-full max-w-[200px] sm:max-w-[280px] -translate-x-1/2 transform transition-transform duration-1000"
  >
    <!-- Remote body with navbar-like styling -->
    <div
      class="relative rounded-2xl rounded-b-none border-2 border-t border-gray-300/80 border-t-gray-200/30 bg-white/90 p-2 sm:p-6 shadow-lg backdrop-blur-xl transition-all duration-300 before:pointer-events-none before:absolute before:bottom-0 before:left-0 before:right-0 before:-z-20 before:h-8 before:rounded-b-2xl before:bg-[linear-gradient(0deg,_rgba(0,0,0,0.08)_1px,transparent_1px)] before:bg-[size:8px_4px] before:content-[''] hover:-translate-y-0.5 hover:shadow-xl"
    >
      <!-- Infrared window with adjusted color -->
      <div
        class="absolute left-1/2 top-0 h-3 w-6 -translate-x-1/2 animate-ac-glow rounded-b-sm bg-emerald-400 text-emerald-400"
      >
      </div>

      <!-- Model number with smaller text -->
      <div class="absolute left-2 top-1.5">
        <p class="text-[6px] sm:text-[7px] text-neutral-400">MODEL AC-{new Date().getFullYear()}</p>
      </div>

      <!-- LCD Display -->
      <div class="relative flex flex-col items-center gap-1.5 sm:gap-3">
        <div class="relative w-full overflow-hidden rounded-lg bg-neutral-900/90 p-1.5 sm:p-3 shadow-inner">
          <!-- LCD Background Pattern -->
          <div class="absolute inset-0 opacity-5">
            <div class="grid h-full w-full grid-cols-8 gap-px">
              {
                Array(32)
                  .fill(0)
                  .map(() => <div class="bg-neutral-400" />)
              }
            </div>
          </div>

          {
            props.title && (
              <div class="relative">
                <p class="font-lcd text-center text-xs sm:text-base font-bold tracking-wide text-neutral-100">{props.title}</p>
                <div class="font-lcd mt-0.5 sm:mt-1 flex flex-col gap-0.5 text-center text-[8px] sm:text-xs text-neutral-100/70">
                  <p class="font-lcd text-center text-[8px] sm:text-xs text-neutral-100/70">Antalya</p>
                  <p class="text-[8px] sm:text-xs">
                    <span id="temperatureValue">25°C</span> Humidity: <span id="humidityValue">50%</span>
                  </p>
                </div>
              </div>
            )
          }
        </div>

        <div class="relative flex w-full flex-col gap-1.5 sm:gap-3">
          <!-- Main action buttons -->
          <div class="relative flex w-full justify-between">
            <PrimaryCTA title={props.btnTitle} url={props.url} class="w-full bg-blue-500 hover:bg-blue-600" />

            <button
              type="button"
              class="relative ml-1.5 sm:ml-2 rounded-full bg-gradient-to-b from-red-500 to-red-600 p-1.5 sm:p-2 text-white shadow-lg shadow-red-500/20 transition duration-200 hover:from-red-600 hover:to-red-700 active:translate-y-0.5 active:shadow-none"
              id={props.btnId}
              style="z-index: 1;"
            >
              <span class="sr-only">Dismiss</span>
              <svg
                class="size-4 sm:size-5"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M18 6 6 18"></path>
                <path d="m6 6 12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</astro-banner>

<style>
  .font-lcd {
    font-family: "Digital-7", monaco, monospace;
  }
</style>

<script>
  class AstroBanner extends HTMLElement {
    connectedCallback() {
      const btnId = this.getAttribute("btnId");
      const button = this.querySelector(`#${btnId}`);
      if (button != null) {
        button.addEventListener("click", () => this.remove());
      }
    }
  }

  customElements.define("astro-banner", AstroBanner);

  document.addEventListener("DOMContentLoaded", updateWeatherInfo);
  document.addEventListener("astro:after-swap", updateWeatherInfo);

  type WeatherData = {
    current: {
      temperature_2m: number;
      relative_humidity_2m: number;
    };
  };

  async function updateWeatherInfo() {
    const response = await fetch(
      "https://api.open-meteo.com/v1/forecast?latitude=36.9081&longitude=30.6956&current=temperature_2m,relative_humidity_2m",
    );
    const data: WeatherData = await response.json();
    if (!data) return;

    const temperatureValue = document.getElementById("temperatureValue");
    if (!temperatureValue) throw new Error("Temperature value element not found.");
    const humidityValue = document.getElementById("humidityValue");
    if (!humidityValue) throw new Error("Humidity value element not found.");
    temperatureValue.textContent = `${data.current.temperature_2m}°C`;
    humidityValue.textContent = `${data.current.relative_humidity_2m}%`;
  }

  window.addEventListener("scroll", () => {
    const banner = document.getElementById("announcementBanner");
    if (banner) {
      if (window.scrollY > 100) {
        banner.style.transform = "translate(-50%, 100%)";
      } else {
        banner.style.transform = "translate(-50%, 0)";
      }
    }
  });
</script>
