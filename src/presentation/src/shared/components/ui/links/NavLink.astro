---
import { mergeCls } from "~/core/acore-ts/ui/ClassHelpers";
import type { TranslationKey } from "~/domain/models/TranslationKey";
import { useI18nStatic } from "~/presentation/src/shared/hooks/useI18n";

type Props = {
  url: string;
  name: TranslationKey;
  class?: string;
};

const props = Astro.props;

const { translate } = useI18nStatic(Astro.url);
---

<!--
Re-usable link component for navigation bar. Highlights the active link
by comparing the current URL with the href of each link.
We assign an ID matching the URL for easy reference in our script.
If URL is '/' (home page), assign ID as 'home' 
-->
<a
  href={props.url}
  data-astro-prefetch
  class={mergeCls(
    "nav-link rounded-lg text-base font-medium text-neutral-600 outline-none ring-zinc-500 hover:text-neutral-800 focus-visible:ring dark:text-neutral-400 dark:hover:text-neutral-200 md:py-3 md:text-sm 2xl:text-base",
    props.class,
  )}
>
  {translate(props.name)}
</a>

<script>
  document.addEventListener("DOMContentLoaded", highlightActiveNavLink);
  document.addEventListener("astro:after-swap", highlightActiveNavLink);

  function highlightActiveNavLink() {
    const pathName = decodeURI(window.location.pathname);
    const navItems = document.querySelectorAll(".nav-link");
    if (!navItems) throw new Error("No nav items found.");

    navItems.forEach((navItem) => {
      const href = navItem.getAttribute("href");
      if (href === pathName) {
        navItem.classList.add("text-neutral-900", "dark:text-neutral-50", "font-semibold");
        navItem.setAttribute("aria-current", "page");
      } else {
        navItem.classList.remove("text-neutral-900", "dark:text-neutral-50", "font-semibold", "animate-ac-glow");
      }
    });
  }
</script>
