---
import Icon from "~/presentation/src/shared/components/ui/icons/Icon.astro";
import { useI18nStatic } from "~/presentation/src/shared/hooks/useI18n";
import { TranslationKeys } from "~/domain/models/TranslationKey";

// Dropdown import'unu kaldÄ±r
type Props = {
  pageTitle: string;
  title?: string;
};

const { pageTitle } = Astro.props;
const { translate } = useI18nStatic(Astro.url);

type SocialPlatform = {
  name: string;
  url: string;
  icon: string;
};

const socialPlatforms: SocialPlatform[] = [
  {
    name: "Facebook",
    url: `https://www.facebook.com/share.php?u=${Astro.url}&title=${pageTitle}`,
    icon: "facebook",
  },
  {
    name: "X",
    url: `https://twitter.com/home/?status=${pageTitle}${Astro.url}`,
    icon: "x",
  },
  {
    name: "WhatsApp",
    url: `https://api.whatsapp.com/send?text=${pageTitle}${Astro.url}`,
    icon: "whatsapp",
  },
  {
    name: "LinkedIn",
    url: `https://www.linkedin.com/shareArticle?mini=true&url=${Astro.url}&title=${pageTitle}`,
    icon: "linkedIn",
  },
];
---

<ac-dropdown>
  <button
    slot="trigger"
    class="inline-flex items-center gap-x-2 rounded-lg px-4 py-3 text-sm font-medium text-neutral-600 outline-none ring-zinc-500 transition duration-300 hover:bg-neutral-100 hover:text-neutral-700 focus-visible:ring dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:outline-none"
  >
    <Icon name="share" />
    {translate(TranslationKeys.common_share)}
  </button>

  <div
    slot="content"
    class="divide-y divide-neutral-200 rounded-lg bg-white p-2 shadow-lg dark:divide-neutral-700 dark:bg-neutral-800"
  >
    <div class="py-2 first:pt-0 last:pb-0">
      {
        socialPlatforms.map((platform) => (
          <a
            class="flex items-center gap-x-3.5 rounded-lg px-3 py-2 text-sm text-neutral-700 hover:bg-neutral-200 focus:bg-neutral-100 focus:outline-none dark:text-neutral-300 dark:hover:bg-neutral-700 dark:focus:bg-neutral-700"
            href={platform.url}
          >
            <Icon name={platform.icon} class="size-4" />
            {platform.name}
          </a>
        ))
      }
    </div>

    <div class="py-2 first:pt-0 last:pb-0">
      <button
        type="button"
        class="js-clipboard hover:text-dark group inline-flex w-full items-center gap-x-3.5 rounded-lg px-3 py-2 text-sm text-neutral-700 hover:bg-neutral-200 focus:bg-neutral-100 focus:outline-none focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-secondary dark:text-neutral-300 dark:hover:bg-neutral-700 dark:focus:bg-neutral-700"
        data-clipboard-success-text={translate(TranslationKeys.common_copied)}
      >
        <Icon name="clipboard" class="js-clipboard-default size-4 transition group-hover:rotate-6" />
        <Icon
          name="clipboardSuccess"
          class="js-clipboard-success hidden size-4 text-neutral-700 dark:text-neutral-300"
        />
        <span class="js-clipboard-success-text">{translate(TranslationKeys.common_copy_link)}</span>
      </button>
    </div>
  </div>
</ac-dropdown>

<script>
  import "~/core/acore-ts/ui/components/Dropdown";
  import ClipboardJS from "clipboard";

  // Initialization of Clipboard
  (function () {
    window.addEventListener("load", () => {
      const clipboards = document.querySelectorAll<HTMLElement>(".js-clipboard");

      clipboards.forEach((el) => {
        const clipboard = new ClipboardJS(el, {
          text: () => {
            return window.location.href;
          },
        });

        clipboard.on("success", () => {
          const defaultElement = el.querySelector<HTMLElement>(".js-clipboard-default");
          const successElement = el.querySelector<HTMLElement>(".js-clipboard-success");
          const successTextElement = el.querySelector<HTMLElement>(".js-clipboard-success-text");
          const successText = el.dataset.clipboardSuccessText || "";
          let oldSuccessText: string | undefined;

          if (successTextElement) {
            oldSuccessText = successTextElement.textContent || "";
            successTextElement.textContent = successText;
          }

          if (defaultElement && successElement) {
            defaultElement.style.display = "none";
            successElement.style.display = "block";
          }

          setTimeout(() => {
            if (successTextElement && oldSuccessText !== undefined) {
              successTextElement.textContent = oldSuccessText;
            }

            if (defaultElement && successElement) {
              successElement.style.display = "";
              defaultElement.style.display = "";
            }
          }, 800);
        });
      });
    });
  })();
</script>
