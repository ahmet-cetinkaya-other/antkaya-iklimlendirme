---
import Icon from "~/presentation/src/shared/components/ui/icons/Icon.astro";
import Container, { Tokens } from "~/presentation/src/Container";
import type II18n from "~/core/acore-ts/i18n/abstraction/II18n";
import { useI18nStatic } from "~/presentation/src/shared/hooks/useI18n";
import { TranslationKeys } from "~/domain/models/TranslationKey";
import { mergeCls } from "~/core/acore-ts/ui/ClassHelpers";

const i18n = Container.resolve<II18n>(Tokens.I18n);
const locales = i18n.locales;
const { translate } = useI18nStatic(Astro.url);
---

<ac-dropdown>
  <button
    slot="trigger"
    type="button"
    aria-label="Change language"
    class="ac-locales-dropdown-button inline-flex items-center gap-x-2 rounded-full px-1.5 py-1.5 text-sm font-medium text-neutral-600 outline-none ring-zinc-500 transition duration-300 hover:bg-neutral-200 hover:text-orange-400 dark:border-neutral-700 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-orange-300 dark:focus:outline-none"
  >
    <Icon name="earth" class="text-emerald-300" />
  </button>

  <div slot="content" class="hidden w-fit rounded-lg bg-white shadow-lg dark:bg-neutral-800 dark:text-neutral-200">
    {
      locales.map((locale) => (
        <button
          data-locale={locale}
          onclick={`
            const locale = this.getAttribute('data-locale');
            window.ac.onLocaleChange(locale);
          `}
          class={mergeCls("ac-locale-button block w-full px-4 py-2 hover:bg-gray-200 dark:hover:bg-neutral-700", {
            "rounded-t-lg": locale === locales[0],
            "rounded-b-lg": locale === locales[locales.length - 1],
          })}
        >
          {translate(TranslationKeys[`common_${locale}` as keyof typeof TranslationKeys])}
        </button>
      ))
    }
  </div>
</ac-dropdown>

<script>
  import "~/core/acore-ts/ui/components/Dropdown";
  import { navigate } from "astro:transitions/client";
  import type II18n from "~/core/acore-ts/i18n/abstraction/II18n";
  import Container, { Tokens } from "~/presentation/src/Container";
  import { PAGES } from "~/presentation/src/shared/constants/constants";
  import type { Locales } from "~/domain/models/TranslationKey";

  if (!(window as any).ac) (window as any).ac = {};
  (window as any).ac.onLocaleChange = onLocaleChange;

  document.addEventListener("DOMContentLoaded", redirectPrefferedLocale);

  function redirectPrefferedLocale() {
    const currentUrl = new URL(window.location.href);

    const i18n = Container.resolve<II18n>(Tokens.I18n);
    const locales = i18n.locales;
    const currentLocale = i18n.getLocaleFromUrl(currentUrl, i18n.locales[0]);
    const preferredLocale = localStorage.getItem("preffered_locale") || i18n.getBrowserLocale().split("-")[0];

    if (preferredLocale && locales.includes(preferredLocale) && currentLocale !== preferredLocale) {
      onLocaleChange(preferredLocale as Locales);
    }
  }

  async function onLocaleChange(locale: Locales) {
    localStorage.setItem("preffered_locale", locale);

    const decodedPath = decodeURIComponent(window.location.pathname);
    const pathSegments = decodedPath.split("/").filter(Boolean);
    const currentLocale = pathSegments[0];

    let targetPath: string | undefined;
    const i18n = Container.resolve<II18n>(Tokens.I18n);
    i18n.currentLocale.set(locale);

    // Redirect to home page if the path is empty or the first segment is empty
    if (pathSegments.length === 0 || pathSegments[0] === "") targetPath = PAGES.home.paths[locale];

    // Redirect to the same page in translations map
    const metaDataPageTranslationsElement = document.querySelector("[data-page-translations]");
    if (metaDataPageTranslationsElement) {
      const metaData = JSON.parse(metaDataPageTranslationsElement.getAttribute("data-page-translations") || "{}");
      if (metaData && metaData[locale]) targetPath = `${PAGES.post.paths[locale]}${metaData[locale]}`;
    } else {
      // Redirect predefined pages
      const pathWithoutLocale = i18n.locales.includes(currentLocale)
        ? pathSegments.slice(1).join("/")
        : pathSegments.join("/");

      const currentPage = Object.values(PAGES).find((page) => {
        return Object.values(page.paths).some(
          (path) => decodeURIComponent(path).replace(/^\/|\/$/g, "") === pathWithoutLocale.replace(/^\/|\/$/g, ""),
        );
      });

      targetPath = currentPage?.paths[locale];
    }

    if (targetPath) navigate(targetPath);
  }
</script>
